
from aiogram import Bot, Dispatcher, F
from aiogram.types import Message, ReplyKeyboardMarkup, InputFile
import sqlite3

from id import dp, bot


async def add_tasks (message:Message):
    await message.answer('–í–≤–µ–¥–∏—Ç–µ –∑–∞–¥–∞—á—É, –∏ —Å—Ä–æ–∫–∏:\n<b>–ø—Ä–∏–º–µ—Ä:</b> <code>–ü–æ–º—ã—Ç—å –ø–æ—Å—É–¥—É - 07.12.2024 10.47</code>', parse_mode="HTML")
    try:
        await dp.message.register(getting_text, F.text)  # –≤—ã–∑–æ–≤ —Å–ª–µ–¥—É—é—â–µ–π —Ñ—É–Ω–∫—Ü–∏–∏
    except TypeError:
        print('TypeError')




async def get_start(message: Message, bot: Bot):
    user_name = message.from_user.username
    welcome_text = """
    <b>–ü—Ä–∏–≤–µ—Ç! üëã</b>\n–Ø ‚Äî —Ç–≤–æ–π –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –ø–æ–º–æ—â–Ω–∏–∫ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∑–∞–¥–∞—á–∞–º–∏.\n–í–º–µ—Å—Ç–µ –º—ã —Å–ø—Ä–∞–≤–∏–º—Å—è —Å–æ –≤—Å–µ–º–∏ –¥–µ–ª–∞–º–∏! üéØ

    –í–æ—Ç —á—Ç–æ —è –º–æ–≥—É:
    - üìã <b>–î–æ–±–∞–≤–∏—Ç—å –∑–∞–¥–∞—á—É</b>: –ø—Ä–æ—Å—Ç–æ –≤–≤–µ–¥–∏ –µ—ë —Ç–µ–∫—Å—Ç –∏ –¥–µ–¥–ª–∞–π–Ω.
    - ‚úÖ <b>–û—Ç–º–µ—Ç–∏—Ç—å –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω–æ–µ</b>: –∑–∞–∫—Ä–æ–π –∑–∞–¥–∞—á—É, –µ—Å–ª–∏ –æ–Ω–∞ –≥–æ—Ç–æ–≤–∞.
    - ‚ùå <b>–£–¥–∞–ª–∏—Ç—å –∑–∞–¥–∞—á—É</b>: –∏–∑–±–∞–≤—å—Å—è –æ—Ç –ª–∏—à–Ω–µ–≥–æ.
    - üîî <b>–ù–∞–ø–æ–º–Ω–∏—Ç—å –æ –¥–µ–¥–ª–∞–π–Ω–µ</b>: –µ—Å–ª–∏ –≤—Ä–µ–º—è –ø–æ–¥–∂–∏–º–∞–µ—Ç.

    üìö <b>–ö–æ–º–∞–Ω–¥—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã:</b>
    - <code>/add</code> ‚Äî –¥–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—É—é –∑–∞–¥–∞—á—É.
    - <code>/list</code> ‚Äî –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –∑–∞–¥–∞—á.
    - <code>/done &lt;–Ω–æ–º–µ—Ä –∑–∞–¥–∞—á–∏&gt;</code> ‚Äî –æ—Ç–º–µ—Ç–∏—Ç—å –∑–∞–¥–∞—á—É –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω–æ–π.
    - <code>/delete &lt;–Ω–æ–º–µ—Ä –∑–∞–¥–∞—á–∏&gt;</code> ‚Äî —É–¥–∞–ª–∏—Ç—å –∑–∞–¥–∞—á—É.
    - <code>/clear</code> ‚Äî –æ—á–∏—Å—Ç–∏—Ç—å –≤–µ—Å—å —Å–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á.
    \nüéØ <b>–ù–∞—á–Ω–∏ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞—Ç—å —É–∂–µ —Å–µ–π—á–∞—Å!</b>\n–í–≤–µ–¥–∏ –∫–æ–º–∞–Ω–¥—É, —á—Ç–æ–±—ã –ø—Ä–∏—Å—Ç—É–ø–∏—Ç—å.
    """

    await message.answer(text=welcome_text, parse_mode="HTML")




async def getting_text(message: Message, bot: Bot):
    user_id = message.from_user.id  # –ü–æ–ª—É—á–∞–µ–º ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    table_name = f"user_{user_id}"  # –£–Ω–∏–∫–∞–ª—å–Ω–æ–µ –∏–º—è —Ç–∞–±–ª–∏—Ü—ã –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

    # –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö (—Å–æ–∑–¥–∞–µ—Ç—Å—è, –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç)
    conn = sqlite3.connect('user_data.db')
    cursor = conn.cursor()

    # –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—É –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –µ—Å–ª–∏ –æ–Ω–∞ –µ—â–µ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
    cursor.execute(f"""
    CREATE TABLE IF NOT EXISTS {table_name} (
        id INTEGER PRIMARY KEY AUTOINCREMENT,
        task TEXT NOT NULL,
        date TEXT NOT NULL,
        status TEXT NOT NULL DEFAULT '–ù–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ'
    )
    """)

    # –†–∞–∑–¥–µ–ª—è–µ–º —Ç–µ–∫—Å—Ç –Ω–∞ —á–∞—Å—Ç–∏
    list_med = message.text.split('-')
    print(message.text)
    print(list_med)

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å –¥–∞–Ω–Ω—ã—Ö –∏ –∑–∞–ø–∏—Å—ã–≤–∞–µ–º –≤ —Ç–∞–±–ª–∏—Ü—É
    if len(list_med) == 2:
        task = list_med[0].strip()
        date = f'–î–æ {list_med[1].strip()}'
        status = "–ù–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ"  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é —Å—Ç–∞—Ç—É—Å –∑–∞–¥–∞—á–∏ "–ù–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ"

        # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –≤ —Ç–∞–±–ª–∏—Ü—É
        cursor.execute(f"INSERT INTO {table_name} (task, date, status) VALUES (?, ?, ?)", (task, date, status))

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è –∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        conn.commit()
        await message.answer(f"–ó–∞–¥–∞—á–∞: '{task}' —Å –¥–∞—Ç–æ–π: '{date}' –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö —Å–æ —Å—Ç–∞—Ç—É—Å–æ–º '{status}'.")
    else:
        await message.answer("–û—à–∏–±–∫–∞: —Ñ–æ—Ä–º–∞—Ç –≤–≤–æ–¥–∞ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π. –ü—Ä–∏–º–µ—Ä: '–ü–æ–º—ã—Ç—å –ø–æ—Å—É–¥—É - 07.12.2024 10:47'")

    # –ó–∞–∫—Ä—ã–≤–∞–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ
    conn.close()











async def user_list(message: Message, bot: Bot):
    user_id = message.from_user.id  # –ü–æ–ª—É—á–∞–µ–º ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    table_name = f"user_{user_id}"  # –£–Ω–∏–∫–∞–ª—å–Ω–æ–µ –∏–º—è —Ç–∞–±–ª–∏—Ü—ã –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

    # –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    conn = sqlite3.connect('user_data.db')
    cursor = conn.cursor()

    try:
        # –ò–∑–≤–ª–µ–∫–∞–µ–º –≤—Å–µ –∑–∞–ø–∏—Å–∏ –∏–∑ —Ç–∞–±–ª–∏—Ü—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        cursor.execute(f"SELECT id, task, date, status FROM {table_name}")
        tasks = cursor.fetchall()

        # –ï—Å–ª–∏ –∑–∞–¥–∞—á –Ω–µ—Ç
        if not tasks:
            await message.answer("–í–∞—à —Å–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á –ø—É—Å—Ç.")
        else:
            # –§–æ—Ä–º–∏—Ä—É–µ–º —Å—Ç—Ä–æ–∫—É —Å–æ —Å–ø–∏—Å–∫–æ–º –∑–∞–¥–∞—á
            tasks_text = "\n\n".join(
                [f"<b>–ó–∞–¥–∞—á–∞ #{row[0]}:</b>\n<b>–û–ø–∏—Å–∞–Ω–∏–µ:</b> {row[1]}\n<b>–î–∞—Ç–∞:</b> {row[2]}\n<b>–°—Ç–∞—Ç—É—Å:</b> {row[3]}"
                 for row in tasks]
            )
            await message.answer(f"<b>–í–∞—à —Å–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á:</b>\n\n{tasks_text}", parse_mode="HTML")

    except sqlite3.OperationalError:
        # –ï—Å–ª–∏ —Ç–∞–±–ª–∏—Ü—ã –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ—Ç
        await message.answer("–£ –≤–∞—Å –µ—â–µ –Ω–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã—Ö –∑–∞–¥–∞—á.")
    finally:
        # –ó–∞–∫—Ä—ã–≤–∞–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ
        conn.close()




async def done_number(message: Message, bot: Bot):
    user_id = message.from_user.id  # ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    table_name = f"user_{user_id}"  # –¢–∞–±–ª–∏—Ü–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    command = message.text.split()  # –†–∞–∑–¥–µ–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–∞ —á–∞—Å—Ç–∏

    if len(command) != 2 or not command[1].isdigit():
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ: /done <–Ω–æ–º–µ—Ä –∑–∞–¥–∞—á–∏>")
        return

    task_id = int(command[1])  # –ü–æ–ª—É—á–∞–µ–º –Ω–æ–º–µ—Ä –∑–∞–¥–∞—á–∏

    # –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    conn = sqlite3.connect('user_data.db')
    cursor = conn.cursor()

    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –∑–∞–¥–∞—á–∞ —Å —Ç–∞–∫–∏–º ID
        cursor.execute(f"SELECT task FROM {table_name} WHERE id = ?", (task_id,))
        task = cursor.fetchone()

        if not task:
            await message.answer(f"–ó–∞–¥–∞—á–∞ —Å –Ω–æ–º–µ—Ä–æ–º {task_id} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
        else:
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∑–∞–¥–∞—á–∏
            cursor.execute(f"UPDATE {table_name} SET status = ? WHERE id = ?", ("–í—ã–ø–æ–ª–Ω–µ–Ω–æ", task_id))
            conn.commit()
            await message.answer(f"–ó–∞–¥–∞—á–∞ #{task_id} —É—Å–ø–µ—à–Ω–æ –æ—Ç–º–µ—á–µ–Ω–∞ –∫–∞–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω–∞—è.")
    except sqlite3.OperationalError:
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–ª—É—á–∞—è, –µ—Å–ª–∏ —Ç–∞–±–ª–∏—Ü—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ—Ç
        await message.answer("–£ –≤–∞—Å –µ—â–µ –Ω–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã—Ö –∑–∞–¥–∞—á.")
    finally:
        # –ó–∞–∫—Ä—ã—Ç–∏–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
        conn.close()





async def delete_task(message: Message):
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–≤—ë–ª –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä –∑–∞–¥–∞—á–∏
    command_parts = message.text.split()
    if len(command_parts) != 2 or not command_parts[1].isdigit():
        await message.reply("–í–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ: /delete <–Ω–æ–º–µ—Ä –∑–∞–¥–∞—á–∏>")
        return

    task_number = int(command_parts[1])  # –ü–æ–ª—É—á–∞–µ–º –Ω–æ–º–µ—Ä –∑–∞–¥–∞—á–∏
    user_id = message.from_user.id  # –ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    table_name = f"user_{user_id}"  # –ò–º—è —Ç–∞–±–ª–∏—Ü—ã –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

    # –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    conn = sqlite3.connect("tasks.db")
    cursor = conn.cursor()

    try:
        # –ü–æ–ª—É—á–∞–µ–º –∑–∞–¥–∞—á—É, —á—Ç–æ–±—ã –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –µ—ë —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ
        cursor.execute(f"SELECT rowid, * FROM {table_name}")
        tasks = cursor.fetchall()

        if task_number < 1 or task_number > len(tasks):
            await message.reply(f"–ó–∞–¥–∞—á–∏ —Å –Ω–æ–º–µ—Ä–æ–º {task_number} –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.")
            return

        # –£–¥–∞–ª—è–µ–º –∑–∞–¥–∞—á—É
        task_id = tasks[task_number - 1][0]  # –ü–æ–ª—É—á–∞–µ–º rowid –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è
        cursor.execute(f"DELETE FROM {table_name} WHERE rowid = ?", (task_id,))
        conn.commit()

        await message.reply(f"–ó–∞–¥–∞—á–∞ ‚Ññ{task_number} —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–∞!")
    except sqlite3.OperationalError:
        await message.reply("–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∑–∞–¥–∞—á.")
    finally:
        conn.close()




async def clear_tasks(message: Message):
    user_id = message.from_user.id  # –ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    table_name = f"user_{user_id}"  # –ò–º—è —Ç–∞–±–ª–∏—Ü—ã –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

    # –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    conn = sqlite3.connect("tasks.db")
    cursor = conn.cursor()

    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Ç–∞–±–ª–∏—Ü–∞ –¥–ª—è –¥–∞–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        cursor.execute(f"SELECT name FROM sqlite_master WHERE type='table' AND name=?", (table_name,))
        if not cursor.fetchone():
            await message.reply("–£ –≤–∞—Å –Ω–µ—Ç –∑–∞–¥–∞—á, –∫–æ—Ç–æ—Ä—ã–µ –º–æ–∂–Ω–æ –æ—á–∏—Å—Ç–∏—Ç—å.")
            return

        # –û—á–∏—â–∞–µ–º —Ç–∞–±–ª–∏—Ü—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        cursor.execute(f"DELETE FROM {table_name}")
        conn.commit()

        await message.reply("–í–∞—à —Å–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á –±—ã–ª —É—Å–ø–µ—à–Ω–æ –æ—á–∏—â–µ–Ω!")
    except sqlite3.OperationalError as e:
        await message.reply("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ø—ã—Ç–∫–µ –æ—á–∏—Å—Ç–∏—Ç—å –∑–∞–¥–∞—á–∏.")
        print(f"–û—à–∏–±–∫–∞: {e}")
    finally:
        conn.close()